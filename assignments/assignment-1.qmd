---
title: "Assignment 1"
format:
  html:
    code-fold: true
    code-tools: true
---

My first assignment has three parts.

## *(A)*

The evolution of data reporting and the increasing use of textual content in R Markdown reports provided to financial institutions emphasize the importance of integrating data visualization and textual narrative. This shift highlights the significance of incorporating text in data-driven reports tailored for an audience of compliance experts and lawyers. By emphasizing the importance of the interaction between data products and people, it discusses when more narrative is needed in data reports and provides technical advice to achieve this purpose. These recommendations include using existing word templates and utilizing techniques such as 'whisker::' and 'glue::' to create dynamic text blocks.

## *(B)*

There are difference between R and Python. We are going to give some examples.

In R, Reversing an Array:

```{r}
vec <- c(1, 2, 3, 4, 5)
reversed_vec <- rev(vec)

```

This R code reverses the vector **`vec`** using the **`rev`** function.

In Python, Reversing an Array:

vec = \[1, 2, 3, 4, 5\] reversed_vec = vec\[::-1\]

In Python, this operation is performed using the language feature **`vec[::-1]`**, which reverses the list **`vec`**.

In this example, in R, we use the **`rev`** function, while in Python, we directly use the language feature **`[::-1]`** to achieve the same result. This showcases the different array manipulation methods between R and Python.

There is another example:

Using a loop in R:

```{r}
for (i in 1:10) {
  print(i)
}

```

This R code prints numbers from 1 to 10.

Using a loop in Python:

for i in range(1, 11): print(i)

This Python code also prints numbers from 1 to 10. The **`range`** function in Python is used to generate numbers within a specific range.

So we have last example here:

Using a conditional statement in R:

```{r}
x <- 10
if (x > 0) {
  print("x is positive")
} else if (x == 0) {
  print("x is zero")
} else {
  print("x is negative")
}

```

This R code checks a condition based on the value of the variable **`x`** and prints the output accordingly.

Using a conditional statement in Python:

x = 10 if x \> 0: print("x is positive") elif x == 0: print("x is zero") else: print("x is negative")

This Python code also checks a condition based on the value of the variable **`x`** and prints the output accordingly.

These examples demonstrate the different syntax and structures of loops and conditional statements in R and Python.

## *(C)*

```{r}
#| output: false
install.packages("dslabs", repos = " https://CRAN.R-project.org/package=dslabs")
library("dslabs")
data("admissions")
zero <- ifelse(is.na(na_example), 0, na_example) 
```

```{r}
print(na_example)
```

```{r}
print(zero)
```
